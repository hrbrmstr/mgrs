// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mgrs_to_latlng
DataFrame mgrs_to_latlng(std::vector < std::string > MGRS, bool degrees, bool include_mgrs_ref);
RcppExport SEXP _mgrs_mgrs_to_latlng(SEXP MGRSSEXP, SEXP degreesSEXP, SEXP include_mgrs_refSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector < std::string > >::type MGRS(MGRSSEXP);
    Rcpp::traits::input_parameter< bool >::type degrees(degreesSEXP);
    Rcpp::traits::input_parameter< bool >::type include_mgrs_ref(include_mgrs_refSEXP);
    rcpp_result_gen = Rcpp::wrap(mgrs_to_latlng(MGRS, degrees, include_mgrs_ref));
    return rcpp_result_gen;
END_RCPP
}
// latlng_to_mgrs
String latlng_to_mgrs(double latitude, double longitude, bool degrees, int precision);
RcppExport SEXP _mgrs_latlng_to_mgrs(SEXP latitudeSEXP, SEXP longitudeSEXP, SEXP degreesSEXP, SEXP precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type latitude(latitudeSEXP);
    Rcpp::traits::input_parameter< double >::type longitude(longitudeSEXP);
    Rcpp::traits::input_parameter< bool >::type degrees(degreesSEXP);
    Rcpp::traits::input_parameter< int >::type precision(precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(latlng_to_mgrs(latitude, longitude, degrees, precision));
    return rcpp_result_gen;
END_RCPP
}
// utm_to_mgrs
String utm_to_mgrs(long zone, std::string hemisphere, double easting, double northing, long precision);
RcppExport SEXP _mgrs_utm_to_mgrs(SEXP zoneSEXP, SEXP hemisphereSEXP, SEXP eastingSEXP, SEXP northingSEXP, SEXP precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type zone(zoneSEXP);
    Rcpp::traits::input_parameter< std::string >::type hemisphere(hemisphereSEXP);
    Rcpp::traits::input_parameter< double >::type easting(eastingSEXP);
    Rcpp::traits::input_parameter< double >::type northing(northingSEXP);
    Rcpp::traits::input_parameter< long >::type precision(precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(utm_to_mgrs(zone, hemisphere, easting, northing, precision));
    return rcpp_result_gen;
END_RCPP
}
// mgrs_to_utm
DataFrame mgrs_to_utm(std::vector < std::string > mgrs_string, bool include_mgrs_ref);
RcppExport SEXP _mgrs_mgrs_to_utm(SEXP mgrs_stringSEXP, SEXP include_mgrs_refSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector < std::string > >::type mgrs_string(mgrs_stringSEXP);
    Rcpp::traits::input_parameter< bool >::type include_mgrs_ref(include_mgrs_refSEXP);
    rcpp_result_gen = Rcpp::wrap(mgrs_to_utm(mgrs_string, include_mgrs_ref));
    return rcpp_result_gen;
END_RCPP
}
// ups_to_mgrs
String ups_to_mgrs(std::string hemisphere, double easting, double northing, long precision);
RcppExport SEXP _mgrs_ups_to_mgrs(SEXP hemisphereSEXP, SEXP eastingSEXP, SEXP northingSEXP, SEXP precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type hemisphere(hemisphereSEXP);
    Rcpp::traits::input_parameter< double >::type easting(eastingSEXP);
    Rcpp::traits::input_parameter< double >::type northing(northingSEXP);
    Rcpp::traits::input_parameter< long >::type precision(precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(ups_to_mgrs(hemisphere, easting, northing, precision));
    return rcpp_result_gen;
END_RCPP
}
// mgrs_to_ups
DataFrame mgrs_to_ups(std::vector < std::string > mgrs_string, bool include_mgrs_ref);
RcppExport SEXP _mgrs_mgrs_to_ups(SEXP mgrs_stringSEXP, SEXP include_mgrs_refSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector < std::string > >::type mgrs_string(mgrs_stringSEXP);
    Rcpp::traits::input_parameter< bool >::type include_mgrs_ref(include_mgrs_refSEXP);
    rcpp_result_gen = Rcpp::wrap(mgrs_to_ups(mgrs_string, include_mgrs_ref));
    return rcpp_result_gen;
END_RCPP
}
// ups_to_latlng
NumericVector ups_to_latlng(std::string hemisphere, double easting, double northing, bool degrees);
RcppExport SEXP _mgrs_ups_to_latlng(SEXP hemisphereSEXP, SEXP eastingSEXP, SEXP northingSEXP, SEXP degreesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type hemisphere(hemisphereSEXP);
    Rcpp::traits::input_parameter< double >::type easting(eastingSEXP);
    Rcpp::traits::input_parameter< double >::type northing(northingSEXP);
    Rcpp::traits::input_parameter< bool >::type degrees(degreesSEXP);
    rcpp_result_gen = Rcpp::wrap(ups_to_latlng(hemisphere, easting, northing, degrees));
    return rcpp_result_gen;
END_RCPP
}
// utm_to_latlng
NumericVector utm_to_latlng(long zone, std::string hemisphere, double easting, double northing, bool degrees);
RcppExport SEXP _mgrs_utm_to_latlng(SEXP zoneSEXP, SEXP hemisphereSEXP, SEXP eastingSEXP, SEXP northingSEXP, SEXP degreesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type zone(zoneSEXP);
    Rcpp::traits::input_parameter< std::string >::type hemisphere(hemisphereSEXP);
    Rcpp::traits::input_parameter< double >::type easting(eastingSEXP);
    Rcpp::traits::input_parameter< double >::type northing(northingSEXP);
    Rcpp::traits::input_parameter< bool >::type degrees(degreesSEXP);
    rcpp_result_gen = Rcpp::wrap(utm_to_latlng(zone, hemisphere, easting, northing, degrees));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mgrs_mgrs_to_latlng", (DL_FUNC) &_mgrs_mgrs_to_latlng, 3},
    {"_mgrs_latlng_to_mgrs", (DL_FUNC) &_mgrs_latlng_to_mgrs, 4},
    {"_mgrs_utm_to_mgrs", (DL_FUNC) &_mgrs_utm_to_mgrs, 5},
    {"_mgrs_mgrs_to_utm", (DL_FUNC) &_mgrs_mgrs_to_utm, 2},
    {"_mgrs_ups_to_mgrs", (DL_FUNC) &_mgrs_ups_to_mgrs, 4},
    {"_mgrs_mgrs_to_ups", (DL_FUNC) &_mgrs_mgrs_to_ups, 2},
    {"_mgrs_ups_to_latlng", (DL_FUNC) &_mgrs_ups_to_latlng, 4},
    {"_mgrs_utm_to_latlng", (DL_FUNC) &_mgrs_utm_to_latlng, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_mgrs(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
